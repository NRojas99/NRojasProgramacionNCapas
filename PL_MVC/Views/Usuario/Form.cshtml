@model ML.Direccion
@{
    ViewBag.Title = "Form";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div class="container">
    <div class="row">
        <div class="col-md-12">
            <h2>Usuario</h2>
            <h5> Ingrese los datos que se le solicita cada campo y presione el boton de agregar </h5>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <hr />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            @using (Html.BeginForm("Form", "Usuario", FormMethod.Post, new { enctype = "multipart/form-data" }))
            {
                <div class="form-horizontal">
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.IdUsuario, new { @class = "hidden" })
                            @Html.TextBoxFor(model => model.Usuario.IdUsuario, new { @class = "hidden form-control", autocomplete = "off" })
                            @Html.ValidationMessageFor(model => model.Usuario.IdUsuario)
                            @*hidden*@
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.UserName)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.UserName, new { @class = "form-control", @id = "txtUserName" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.UserName)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Password)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Password, new { @class = "form-control", type = "password", @id = "txtPassword", @onkeyup = "return ValidarPassword()", @autocomplete = "off" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.Password)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Nombre)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Nombre, new { @class = "form-control", @id = "txtNombre", @onkeypress = "return SoloLetras(this,'lblErrorNombre')", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorNombre"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.Nombre)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.ApellidoPaterno)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.ApellidoPaterno, new { @class = "form-control", @id = "txtApellidoPaterno", @onkeypress = "return SoloLetras(this,'lblErrorApellidoPaterno')", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorApellidoPaterno"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.ApellidoPaterno)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.ApellidoMaterno)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.ApellidoMaterno, new { @class = "form-control", @id = "txtApellidoMaterno", @onkeypress = "return SoloLetras(this,'lblErrorApellidoMaterno')", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorApellidoMaterno"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.ApellidoMaterno)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Email)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Email, new { @class = "form-control", @id = "txtEmail", @onblur = "return ValidarEmail()", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorEmail"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.Email)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.FechaNacimiento)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.FechaNacimiento, new { @class = "form-control", @id = "txtFechaNacimiento", placeholder = "dd-mm-yyyy" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.FechaNacimiento)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Sexo)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Sexo, new { @class = "form-control", @id = "txtSexo" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.Sexo)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Telefono)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Telefono, new { @class = "form-control", @id = "txtTelefono", @onkeypress = "return SoloNumeros(event,'lblErrorTelefono')", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorTelefono"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.Telefono)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Celular)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Celular, new { @class = "form-control", @id = "txtCelular", @onkeypress = "return SoloNumeros(event,'lblErrorCelular')", @autocomplete = "off" })
                            </div>
                            <label class="alert-danger" id="lblErrorCelular"></label>
                            @Html.ValidationMessageFor(model => model.Usuario.Celular)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Estatus)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.Estatus, new { @class = "form-control", @id = "txtEstatus" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.Estatus)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.CURP)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Usuario.CURP, new { @class = "form-control", @id = "txtCURP" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.CURP)
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Rol.IdRol)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.DropDownListFor(model => model.Usuario.Rol.IdRol, new SelectList(Model.Usuario.Rol.Roles, "IdRol", "Nombre"), "Selecciona una opción", new { @class = "form-control" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Usuario.Rol)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Calle)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.Calle, new { @class = "form-control" })
                            </div>

                            @Html.ValidationMessageFor(model => model.Calle)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.NumeroExterior)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.NumeroExterior, new { @class = "form-control" })
                            </div>

                            @Html.ValidationMessageFor(model => model.NumeroExterior)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.NumeroInterior)

                            <div class="input-group">
                                <span class="input-group-addon" id="basic-addon1">@@</span>
                                @Html.TextBoxFor(model => model.NumeroInterior, new { @class = "form-control" })
                            </div>

                            @Html.ValidationMessageFor(model => model.NumeroInterior)
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Colonia.Municipio.Estado.Pais.Paises, new { @class = "control-label" })
                            @if (Model.Colonia.Municipio.Estado.Pais.Paises == null)
                            {
                                @Html.DropDownListFor(model => model.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(String.Empty, "Value", "Text"), "Selecciona un pais", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Colonia.Municipio.Estado.Pais.IdPais, new SelectList(Model.Colonia.Municipio.Estado.Pais.Paises, "IdPais", "Nombre"), "Selecciona un pais", htmlAttributes: new { id = "ddlPais", @class = "form-control" })
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Colonia.Municipio.Estado.Pais.IdPais, null, new { @class = "text-danger" })
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Colonia.Municipio.Estado.Estados, new { @class = "control-label" })
                            @if (Model.Colonia.Municipio.Estado.Estados == null)
                            {
                                @*model.Categoria.IdCategoria*@
                                @Html.DropDownListFor(model => model.Colonia.Municipio.Estado.IdEstado, new SelectList(String.Empty, "Value", "Text"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Colonia.Municipio.Estado.IdEstado, new SelectList(Model.Colonia.Municipio.Estado.Estados, "IdEstado", "Nombre"), "Selecciona un Estado", htmlAttributes: new { id = "ddlEstado", @class = "form-control" })
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Colonia.Municipio.Estado.IdEstado, null, new { @class = "text-danger" })
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Colonia.Municipio.Municipios, new { @class = "control-label" })
                            @if (Model.Colonia.Municipio.Municipios == null)
                            {
                                @Html.DropDownListFor(model => model.Colonia.Municipio.IdMunicipio, new SelectList(String.Empty, "Value", "Text"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Colonia.Municipio.IdMunicipio, new SelectList(Model.Colonia.Municipio.Municipios, "IdMunicipio", "Nombre"), "Selecciona un Municipio", htmlAttributes: new { id = "ddlMunicipio", @class = "form-control" })
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Colonia.Municipio.IdMunicipio, null, new { @class = "text-danger" })
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Colonia.Colonias, new { @class = "control-label" })
                            @if (Model.Colonia.Colonias == null)
                            {
                                @Html.DropDownListFor(model => model.Colonia.IdColonia, new SelectList(String.Empty, "Value", "Text"), "Selecciona una Colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                            }
                            else
                            {
                                @Html.DropDownListFor(model => model.Colonia.IdColonia, new SelectList(Model.Colonia.Colonias, "IdColonia", "Nombre"), "Selecciona una colonia", htmlAttributes: new { id = "ddlColonia", @class = "form-control" })
                            }
                        </div>
                        @Html.ValidationMessageFor(model => model.Colonia.IdColonia, null, new { @class = "text-danger" })
                    </div>
                    <br />

                    <div class="row">
                        <div class="col-md-3">
                            @Html.LabelFor(model => model.Usuario.Imagen)
                            <input type="file" name="fuImagen" onchange="readURL(this);">
                            @if (Model.Usuario.Imagen != null)
                            {
                                <img src="data:image/png;base64,@Convert.ToBase64String(Model.Usuario.Imagen)" id="ImagenPreview" width="100px" height="100px" />
                            }
                            else
                            {
                                <br />
                                <img src="~/Img/sinimagen.png" id="ImagenPreview" style="height:150px; width:150px;" />
                            }

                            @Html.ValidationMessageFor(model => model.Usuario.Imagen)
                        </div>
                    </div>

                    @Html.HiddenFor(model => model.Usuario.Imagen)

                    <br />

                    <div class="form-group">
                        <div class="col-md-3">
                            <input type="submit" value="Guardar" class="btn btn-success" />
                            @Html.ActionLink("Regresar", "GetAll", "Usuario", htmlAttributes: new { @class = "btn btn-danger" })
                        </div>
                    </div>

                </div>
            }



        </div>
    </div>

</div>

<script src="../../Scripts/jquery-1.10.2.js" type="text/javascript"></script>
<script src="../../Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.6/jquery.min.js" type="text/javascript"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js" type="text/javascript"></script>
<link href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css" rel="Stylesheet" type="text/css" />

<script>


    $(document).ready(function () {

        $("#ddlPais").change(function () {
            $("#ddlEstado").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetEstado")',
                dataType: 'json',
                data: { IdPais: $("#ddlPais").val() },
                success: function (estados) {
                    $("#ddlEstado").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(estados, function (i, estados) {
                        $("#ddlEstado").append('<option value="'
                                              + estados.IdEstado + '">'
                                              + estados.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });

        //------------------------------------------------------

        $("#ddlEstado").change(function () {
            $("#ddlMunicipio").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetMunicipio")',
                dataType: 'json',
                data: { IdEstado: $("#ddlEstado").val() },
                success: function (municipios) {
                    $("#ddlMunicipio").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(municipios, function (i, municipios) {
                        $("#ddlMunicipio").append('<option value="'
                                              + municipios.IdMunicipio + '">'
                                              + municipios.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });

        //------------------------------------------------------

        $("#ddlMunicipio").change(function () {
            $("#ddlColonia").empty();
            $.ajax({
                type: 'POST',
                url: '@Url.Action("GetColonia")',
                dataType: 'json',
                data: { IdMunicipio: $("#ddlMunicipio").val() },
                success: function (colonias) {
                    $("#ddlColonia").append('<option value="0">' + 'Seleccione una opción' + '</option>');
                    $.each(colonias, function (i, colonias) {
                        $("#ddlColonia").append('<option value="'
                                              + colonias.IdColonia + '">'
                                              + colonias.Nombre + '</option>');
                    });
                },
                error: function (ex) {
                    alert('Failed.' + ex);
                }
            });
        });
    });
    //----------------------------------------------- Imagen
    function readURL(input) {
        if (input.files && input.files[0]) {
            var reader = new FileReader();
            reader.onload = function (e) {
                $('#ImagenPreview').attr('src', e.target.result);
            };
            reader.readAsDataURL(input.files[0]);
        }
    }
    //----------------------------------------------
    function SoloLetras(e, controlId) {

        var letra = e.onkeypress.arguments[0].key;
        if (!/[^a-zA-Z]/.test(letra)) {
            $("#" + controlId).html('');//nombre, ap, am
            return true;
        }
        else {
            $("#" + controlId).html('Solo se aceptan letras');
            //alert('Solo se aceptan letras');
            return false;
        }
    }
    //----------------------------------------------
    function SoloNumeros(e, controlId) {
        var caracter = e.key;
        if (!/^[0-9]+$/g.test(caracter)) {
            $('#' + controlId).text("Solo se aceptan números");
            $('#' + controlId).css({ "color": "red" });
            return false;
        }
        else {
            $('#' + controlId).text("");
            return true;
        }
    }
    //----------------------------------------------
    function ValidarEmail() {
        var txtEmail = $("#txtEmail").val();
        if (!/^\b[A-Z0-9._%-]+\@@[A-Z0-9.-]+\.[A-Z]{2,4}\b$/i.test(txtEmail)) {
            $("#txtEmail").css('border-color', 'red');
        }
        else {
            $("#txtEmail").css('border-color', 'green');
        }
    }
    //----------------------------------------------
    function ValidarPassword() {
        var txtPassword = $("#txtPassword").val();
        var pattern = /^[a-zA-Z0-9_-]{5,15}$/;
        if (pattern.test(txtPassword)) {
            $("#txtPassword").css('border-color', 'red');
            return true;
        }
        else {
            $("#txtPassword").css('border-color', 'green');
            return false;
        }
    }
</script>
